## SNP calling pipeline for Brassica oleracea
## Follows GATK best practices https://software.broadinstitute.org/gatk/documentation/article.php?id=3893
## Sarah Turner-Hissong

# to run workflow use submit.sh script

# new sequence data!
# parsing of filenames & creation of dictonary from:
# https://stackoverflow.com/questions/53379629/snakefile-and-wildcard-regex-for-output-file-naming
FASTQ = glob_wildcards("data/raw/fastq/{fastq}_R1_001.fastq.gz").fastq
# IDS = [filename.split('_', 1)[0] for filename in FASTQ.fastq]
# samps = {filename.split('_', 1)[0]: 'data/raw/fastq/' + filename for filename in FASTQ.fastq}

# get sample names (option 2: manual entries)
SAMPLES = ['SamC_' + str(x).rjust(3, '0') for x in range(1,120)]

# all samples
ALL_SAMPS = SAMPLES + FASTQ

# list chromosome ids
chr = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9']

# add paths for locally installed software
# ngsTools (https://github.com/mfumagalli/ngsTools)
ngsTools = "../../software/ngsTools"
pcangsd = "../../software/pcangsd"

# FINESTRUCTURE software (v4)
# wget https://people.maths.bris.ac.uk/~madjl/finestructure/fs_4.0.1.zip
# unzip fs_4.0.1.zip
fs = "../bin/fs_4.0.1"

# a pseudo-rule that collects the target files (expected outputs)
rule all:
	input:
		# ancestral fasta
		anc_fasta = "data/processed/anc/B_rapa_HDEM.fa.gz",
		# PCA
		beaglegl = expand("data/processed/pcangsd_{chr}.beagle.gz", chr = chr)
		# neutrality stats

include: "rules/angsd.smk"
